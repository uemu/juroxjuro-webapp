buildscript {
	ext {
		kotlinVersion = '1.1.61'
		springBootVersion = '2.0.0.M6'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}") //+
		classpath("com.h2database:h2:1.4.196") //+
		classpath("org.flywaydb:flyway-gradle-plugin:4.2.0") //+
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: "kotlin-jpa" //+
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.flywaydb.flyway' //+

group = 'uemu'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.flywaydb:flyway-core')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jre8")
	compile("org.jetbrains.kotlin:kotlin-reflect")
	runtime('com.h2database:h2')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('io.projectreactor:reactor-test')
}


def h2Url = 'jdbc:h2:file:./h2db/juroxjuro'
def h2User = 'sa'
def h2Password = ''

flyway { //+
	url = h2Url
	user = h2User
	password = h2Password
}


def h2ScriptFileName = 'h2db/backup.sql'

// H2のデータのバックアップ
task backupH2(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	main = 'org.h2.tools.Script'
	args = ['-url', h2Url, '-user', h2User, '-password', h2Password, '-script', h2ScriptFileName]
	doLast {
		def insertScript = file(h2ScriptFileName).text
		insertScript = insertScript.replaceAll(/(CREATE|ALTER)[^;]+;\s*\R*/, '')
		insertScript = insertScript.replaceAll(/(--|INSERT)[^;]+schema_version[^;]+;\s*\R*/, '')

		def deleteScript = ';\n'
		Set<String> tables = []
		insertScript.findAll(/INSERT INTO ([^\s]+)\([^;]+;\s*\R*/){ g0, g1 -> tables.add(g1) }
		tables.forEach() { table -> deleteScript += 'DELETE FROM ' + table + ';\n' }

		file(h2ScriptFileName).text = deleteScript + insertScript
	}
}

// H2のデータのリストア
task restoreH2(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	main = 'org.h2.tools.RunScript'
	args = ['-url', h2Url, '-user', h2User, '-password', h2Password, '-script', h2ScriptFileName]
}